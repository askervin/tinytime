#!/usr/bin/env python3

# tinytime, base 60 representation for time and date
#
# Command line interface
#
# Copyright 2018 Antti Kervinen <antti.kervinen@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms and conditions of the GNU Lesser General Public
# License, version 2.1, as published by the Free Software Foundation.
#
# This program is distributed in the hope it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA
# 02110-1301 USA.

"""Usage: tinytime [COMMAND...]

Commands:
  epoch                 print epoch time and date in base 60 format.
  clock                 print local time in base 60 format.
  B60EPOCH              print base 60 epoch time as local time and date.
  /B60CLOCK             print base 60 local time as local time.
  B60EPOCH1-B60EPOCH2   print time difference in human readable format.

In B60EPOCH format first three symbols are specify the date, last
three digits the time.

Example: tiny timestamp in Bash prompt
  export PS1="\$(tinytime epoch) $PS1"
"""

import datetime
import re
import sys
import time

import tinytime

if __name__ == "__main__":
    if len(sys.argv) == 1:
        # no parameters, convert tinyepochs/clocks in stdin
        # supported timestamp syntaxes:
        # "%" 6_SYMBOL_DATE_TIME_EPOCH
        re_tinyb60_epochstamp = re.compile(r'(%%[%s]{6})([^%s]|$)' % (
            tinytime.symbols60, tinytime.symbols60))
        for line in sys.stdin:
            l = re_tinyb60_epochstamp.findall(line)
            for tinyb60, sth_else in l:
                formatted = tinytime.strfepoch(tinyb60[1:])
                line = line.replace(tinyb60 + sth_else, "[" + formatted + "]" + sth_else)
            sys.stdout.write(line)
    else:
        for arg in sys.argv[1:]:
            if arg == "epoch":
                print(tinytime.epoch_to_tinyb60(int(time.time())))
            elif arg == "clock": # local time
                t = datetime.datetime.now()
                int_t = (t.second +
                         t.minute * 60 +
                         t.hour   * 60 * 60)
                print(tinytime.int_to_tinyb60(int_t))
            elif arg.count("-") >= 2: # ISO-8601 date or alike
                print(tinytime.epoch_to_tinyb60(
                    tinytime.iso_to_int(arg)))
            elif arg.startswith("/"):
                if "-" in arg:
                    clock_str_1, clock_str_2 = arg.split("-")
                    clock_1 = tinytime.tinyb60_to_int(clock_str_1[1:])
                    clock_2 = tinytime.tinyb60_to_int(clock_str_2[1:])
                    print(tinytime.timediff(clock_2 - clock_1))
                else:
                    print(tinytime.strfclock(arg[1:]))
            else:
                if "-" in arg:
                    epoch_str_1, epoch_str_2 = arg.split("-")
                    epoch_1 = tinytime.tinyb60_to_epoch(epoch_str_1)
                    epoch_2 = tinytime.tinyb60_to_epoch(epoch_str_2)
                    if epoch_1 >= epoch_2:
                        print(tinytime.timediff(epoch_1 - epoch_2,))
                    else:
                        print("-%s" % (tinytime.timediff(epoch_2 - epoch_1,),))
                else:
                    if len(arg) == 3: # hh:mm:ss only
                        print(tinytime.strfepoch(arg, "%T"))
                    else:
                        print(tinytime.strfepoch(arg))
